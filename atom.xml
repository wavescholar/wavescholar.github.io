<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bruce B Campbell]]></title>
  <link href="http://wavescholar.com/atom.xml" rel="self"/>
  <link href="http://wavescholar.com/"/>
  <updated>2015-08-02T18:38:18+00:00</updated>
  <id>http://wavescholar.com/</id>
  <author>
    <name><![CDATA[Bruce Campbell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  

  <entry>
    <title type="html"><![CDATA[Support Vector Machines]]></title>
    <link href="http://wavescholar.com/blog/2015/05/30/multiclasssvm/"/>
    <updated>2015-05-30T23:22:44+00:00</updated>
    <id>http://wavescholar.com/blog/2015/05/30/multiclasssvm</id>
    <content type="html"><![CDATA[<p>Below is the class declaration from the multiclass Support Vector Machine implemented in klMatrix.
This uses the Sequential minimal optimization (SMO) algorithm for solving the quadratic programming (QP) 
problem that arises during the training of the SVM.  The algorithm implements the work of 
[Borer, Silvio. New support vector algorithms for multicategorical data applied to real-time object recognition. Diss. Ecole Polytechnique Federale de Lausanne, 2003].</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class=""><span class="line">template &lt;class TYPE&gt; class klMulticlassSVMTrain : public klSamplePopulation&lt;TYPE&gt;
</span><span class="line">{
</span><span class="line">public:
</span><span class="line">    //These are the outputs of the training operation
</span><span class="line">    klVector&lt;TYPE&gt; _lagMults;
</span><span class="line">    klVector&lt;TYPE&gt; _intercepts;
</span><span class="line">    klMatrix&lt;TYPE&gt; _supportPoints;
</span><span class="line">    klVector&lt;int&gt;  _supportClasses;
</span><span class="line">
</span><span class="line">
</span><span class="line">    //Inputs of the training operation
</span><span class="line">    klVector&lt;int&gt; _trainingClasses;
</span><span class="line">
</span><span class="line">    //	  nu                - fraction of the distribution to exclude - called
</span><span class="line">    //                     "outlierFraction" in much of the rest of the SVM code
</span><span class="line">    //						p x 1 array of desired fraction of outliers, one for each of p classes.
</span><span class="line">    klVector&lt;TYPE&gt; _outlierFraction;
</span><span class="line">
</span><span class="line">    //  mixingCoeff =0.5 is a good place to start
</span><span class="line">    TYPE _mixingCoeff;
</span><span class="line">
</span><span class="line">    unsigned int _numClasses;
</span><span class="line">
</span><span class="line">    //	double smoThresh=1/10,000; is the  tolerance for SMO algorithm
</span><span class="line">    TYPE _smoThresh;
</span><span class="line">
</span><span class="line">
</span><span class="line">    //The width of RBF kernel.
</span><span class="line">    double _sigma;
</span><span class="line">
</span><span class="line">    TYPE RadialBasisFunctionKernel(TYPE* x, TYPE* y) 
</span><span class="line">    {
</span><span class="line">        unsigned int     n;
</span><span class="line">        TYPE  sum, d;
</span><span class="line">
</span><span class="line">        sum = 0;
</span><span class="line">        for(n = 0; n &lt;getColumns(); n++)
</span><span class="line">        {
</span><span class="line">            d = x[n] - y[n];
</span><span class="line">            sum += d * d;
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        return(std::exp(-   sum /(2.0 * _sigma * _sigma)) );  
</span><span class="line">    }
</span><span class="line"> ...</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
 
  
</feed>
